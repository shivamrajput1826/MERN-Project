import {
  UseInterceptors,
  NestInterceptor,
  ExecutionContext,
  CallHandler,
} from '@nestjs/common';
import { Observable } from 'rxjs';
import { map } from 'rxjs';
import { plainToClass } from 'class-transformer';

export class SerializeInterceptor implements NestInterceptor {
  intercept(
    context: ExecutionContext,
    next: CallHandler<any>,
  ): Observable<any> {
    // run something before a request is handled by the request handler
    console.log('I am running before handler', context);
    return next.handle().pipe(
      map((data: any) => {
        //Run something before the response is sent out
        console.log('I am running before the response is sent out', data);
      }),
    );
  }
}


Now in the  Interceptor, we are getting an instance of the user entity.
Now normally whenever we finish all of our request handlers, whenerver we finish all 
these interceptor, nest is going to take whatever comes out of all this stuff and 
turn it into json for us.

So now we are going to take that user entity, and convert it into user Dto instance
this Dto instance thing is going to have all of our different serialization rules.
