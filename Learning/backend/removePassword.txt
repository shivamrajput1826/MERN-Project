Normally                                                                                                    
Request ------> UserController--------> UserService--> User Entity instance ------------------> Class Serialized Interceptor
                   (findUser())          (findOne())   (Direction on how to turn this            (Turns an instance of User Entity into a plain Object
                                                 instance of a class into a plain object)        based on some rules)


An interceptor is a tool inside of nest that allows us to intercept incoming request or outgoing reponses and mess around with them in some way

in the entity file
@Column()
  @Exclude()
  password: string;


  In the controller file..
  @UseInterceptors(ClassSerializerInterceptor)

  Now the problem is lets say i am admin, and i want all the information of the user
  so i have to create a different route
  lets say some else want only 2 out of 5 information, he has to create a new route as well


  For this, we will create a custom Interceptor-> DTO that describes how to serialize 
  a user for this particular route handler.

  Custom Interceptor
  class CustomInterceptor
  intercept(context:ExecutionContext,next:CallHandler)
  intercept=> intercept method is automatically called anytime our interceptor needs 
  to run. So it handle incoming request and incoming response

  Context=> a wrapper around some information on the incoming request
  Next=> kind of reference to the request handler in our controller.


